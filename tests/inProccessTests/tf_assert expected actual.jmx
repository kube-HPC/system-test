<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="assert expected/actual" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">file</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basePath}/${expected_file_name}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dd=ctx.getPreviousResult().getResponseDataAsString();
//String id=vars.get(&quot;id&quot;);
//String time=vars.get (&quot;timeStamp&quot;);
//String timeTook= vars.get (&quot;timeTook&quot;);


//String rep1=response.replace(&quot;{id}&quot;, id);
//String rep2=rep1.replace (&quot;{timeStamp}&quot;,time);
//rep2=rep2.replace (&quot;\&quot;{timeTook}\&quot;&quot;, timeTook);
//String rep3=rep2.replaceAll (&quot;\n&quot;,&quot;&quot;);
//rep3=rep3.replaceAll(&quot;\t&quot;,&quot;&quot;);
//rep3=rep3.replaceAll(&quot; &quot;,&quot;&quot;);

//dd = vars.get(&quot;dataActual&quot;);
dd = dd.replaceAll (&quot;\n&quot;,&quot;&quot;);
dd = dd.replaceAll(&quot;\t&quot;,&quot;&quot;);
dd = dd.replaceAll(&quot; &quot;,&quot;&quot;);
vars.put (&quot;responseFinal&quot;,dd);


//print (rep3);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String response = prev.getResponseDataAsString();


String id=vars.get(&quot;id&quot;);
String time=vars.get (&quot;timeStamp&quot;);
String timeTook= vars.get (&quot;timeTook&quot;);


String rep1=response.replace(&quot;{id}&quot;, id);
String rep2=rep1.replace (&quot;{timeStamp}&quot;,time);
rep2=rep2.replace (&quot;\&quot;{timeTook}\&quot;&quot;, timeTook);
rep2=rep2.replaceAll (&quot;\n&quot;,&quot;&quot;);
rep2=rep2.replaceAll(&quot;\t&quot;,&quot;&quot;);
rep2=rep2.replaceAll(&quot; &quot;,&quot;&quot;);


char [] responseCharArray = rep2.toCharArray();
Arrays.sort(responseCharArray);
rep2 = Arrays.toString(responseCharArray);

//print (rep2);
vars.put (&quot;dataActual&quot;,rep2); </stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String response = prev.getResponseDataAsString();


String id=vars.get(&quot;id&quot;);
String time=vars.get (&quot;timeStamp&quot;);
String timeTook= vars.get (&quot;timeTook&quot;);


String rep1=response.replace(&quot;{id}&quot;, id);
String rep2=rep1.replace (&quot;{timeStamp}&quot;,time);
rep2=rep2.replace (&quot;\&quot;{timeTook}\&quot;&quot;, timeTook);

//print (rep2);
vars.put (&quot;dataActual&quot;,rep2); </stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">String expected=vars.get (&quot;responseFinal&quot;);
String actual=vars.get (&quot;dataActual&quot;);


print (expected);
print (&quot;*********&quot;);
print (actual);
print (&quot;***********&quot;);


if (actual.equals(expected))
{
	Failure=false;
//	print(&quot;pass&quot;);
}
else 
{
	Failure=true;
	FailureMessage=&quot;both strings were not equal&quot;;
//	print (&quot;fail&quot;);
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">debug();

package org.skyscreamer.jsonassert;

import org.junit.Assert;

import org.json.JSONException;
import org.junit.Test;
import org.skyscreamer.jsonassert.Customization;
import org.skyscreamer.jsonassert.JSONCompareMode;
import org.skyscreamer.jsonassert.comparator.CustomComparator;

import org.skyscreamer.jsonassert.JSONCompare;

String expected=vars.get (&quot;responseFinal&quot;);
String actual=vars.get (&quot;dataActual&quot;);


//print (expected);
//print (&quot;*********&quot;);
//print (actual);
//print (&quot;***********&quot;);

JSONCompareResult js=new JSONCompareResult();

js.compareJSON (expected,actual, false);



//if (actual.equals(expected))
//{
	//Failure=false;
//	print(&quot;pass&quot;);
//}
//else 
//{
//	Failure=true;
//	FailureMessage=&quot;both strings were not equal&quot;;
//	print (&quot;fail&quot;);
//}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">debug();

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

String expected=vars.get (&quot;responseFinal&quot;);
String actual=vars.get (&quot;dataActual&quot;);

final JSONObject obj1 = expected;
final JSONObject obj2 = actual;

final ObjectMapper mapper = new ObjectMapper();

final JsonNode tree1 = mapper.readTree(obj1.toString());
final JsonNode tree2 = mapper.readTree(obj2.toString());


print (tree1.equals(tree2));
//print (expected);
//print (&quot;*********&quot;);
//print (actual);
//print (&quot;***********&quot;);





//if (actual.equals(expected))
//{
	//Failure=false;
//	print(&quot;pass&quot;);
//}
//else 
//{
//	Failure=true;
//	FailureMessage=&quot;both strings were not equal&quot;;
//	print (&quot;fail&quot;);
//}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
